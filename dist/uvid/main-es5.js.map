{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/room-connection/room-connection.component.ts","webpack:///src/app/components/room-connection/room-connection.component.html","webpack:///src/app/models/webrtc-client.model.ts","webpack:///src/app/services/mediastream.service.ts","webpack:///src/app/services/webrtc-client-connection.service.ts","webpack:///src/app/services/webrtc-clients.service.ts","webpack:///src/app/webrtc/webrtc-event-messages.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","RoomConnectionComponent","route","router","webRTCConnectionService","webRTCClientService","domSanitizer","userName","roomId","undefined","roomWasFull","params","subscribe","setRoomId","getRoomId","getRoomWasFull","getClients","userList","usersConnected","toArray","console","error","isConnected","currentURL","location","origin","tempTxtBox","document","createElement","style","position","left","top","opacity","value","body","appendChild","focus","select","execCommand","removeChild","connect","disconnect","navigate","user","video","getElementById","srcObject","stream","WebRTCClient","MediaStreamService","mediaStream","navigator","mediaDevices","getUserMedia","audio","reject","WebRTCConnectionService","webRTCClientsService","mediaStreamService","userConnections","socket","on","userId","log","data","makeOffer","username","userDisconnected","handleRTCMessage","room","getMediaStream","currentUser","addClient","emit","getTracks","forEach","track","stop","removeClient","userConnection","getUserConnection","options","mandatory","offerToReceiveVideo","offerToReceiveAudio","createOffer","session","setLocalDescription","from","dest","type","getUserName","RTCPeerConnection","onicecandidate","event","ice","candidate","onnegotiationneeded","onsignalingstatechange","signalingState","addTrack","ontrack","kind","streams","message","addIceCandidate","setRemoteDescription","RTCSessionDescription","createAnswer","WebRTCClientService","clients","newClient","next","getValue","push","clientId","clientList","removeIndex","findIndex","c","remove","find","asObservable","RTC_USER_CONNECTED","RTC_USER_DISCONNECTED","RTC_DISCONNECT","RTC_INIT","RTC_CONNECTED_TO_ROOM","RTC_ROOM_IS_FULL","RTC_MESSAGE","RTC_MESSAGE_TYPE_ICE","RTC_MESSAGE_TYPE_OFFER","RTC_MESSAGE_TYPE_ANSWER","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RoomConnectionComponent } from './components/room-connection/room-connection.component';\n\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'room-connection/', pathMatch: 'full' },\n  { path: 'room-connection', redirectTo: 'room-connection/', pathMatch: 'full' },\n  { path: 'room-connection/:roomId', component: RoomConnectionComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n  title = 'uvid';\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { RoomConnectionComponent } from './components/room-connection/room-connection.component';\nimport { WebRTCConnectionService } from './services/webrtc-client-connection.service';\nimport { WebRTCClientService } from './services/webrtc-clients.service';\nimport { MediaStreamService } from './services/mediastream.service';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nrequire('webrtc-adapter');\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RoomConnectionComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatInputModule,\n    MatCardModule\n  ],\n  providers: [\n    WebRTCConnectionService,\n    WebRTCClientService,\n    MediaStreamService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { map } from 'rxjs/operators';\nimport { WebRTCConnectionService } from '../../services/webrtc-client-connection.service';\nimport { WebRTCClientService } from '../../services/webrtc-clients.service';\nimport { WebRTCClient } from '../../models/webrtc-client.model';\nimport { SafeResourceUrl, DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-room-connection',\n  templateUrl: './room-connection.component.html',\n  styleUrls: ['./room-connection.component.sass']\n})\nexport class RoomConnectionComponent implements OnInit {\n\n  public userName: string = '';\n  public roomId?: string = undefined;\n  public usersConnected: WebRTCClient[];\n  public isConnected: boolean;\n  public currentURL: string;\n  public roomWasFull: boolean = false;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private webRTCConnectionService: WebRTCConnectionService,\n              private webRTCClientService: WebRTCClientService,\n              private domSanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params) => {\n      if (params.roomId) {\n        this.webRTCClientService.setRoomId(params.roomId, false);\n      } else {\n        this.webRTCClientService.setRoomId(undefined, false);\n      }\n    });\n\n    this.webRTCClientService.getRoomId.subscribe((roomId) => {\n      this.roomId = roomId;\n    });\n\n    this.webRTCClientService.getRoomWasFull.subscribe((roomWasFull) => {\n      this.roomWasFull = roomWasFull;\n    });\n\n    this.webRTCClientService.getClients.subscribe((userList) => {\n      this.usersConnected = userList.toArray();\n    }, (e) => {\n      console.error('Error updating user list:', e);\n    });\n\n    this.isConnected = false;\n    this.currentURL = location.origin + '/room-connection/';\n  }\n\n  copyLink() {\n    const tempTxtBox = document.createElement('textarea');\n    tempTxtBox.style.position = 'fixed';\n    tempTxtBox.style.left = '0';\n    tempTxtBox.style.top = '0';\n    tempTxtBox.style.opacity = '0';\n    tempTxtBox.value = this.currentURL + this.roomId;\n    document.body.appendChild(tempTxtBox);\n    tempTxtBox.focus();\n    tempTxtBox.select();\n    document.execCommand('copy');\n    document.body.removeChild(tempTxtBox);\n  }\n\n  connect() {\n    this.webRTCConnectionService.connect(this.userName, this.roomId);\n    this.isConnected = true;\n  }\n\n  disconnect() {\n    this.webRTCConnectionService.disconnect();\n    this.isConnected = false;\n    this.webRTCClientService.setRoomId(undefined, false);\n    this.router.navigate(['/room-connection']);\n  }\n\n  setStreamSrc(user: WebRTCClient): string {\n    const video = document.getElementById(user.id);\n    (video as HTMLMediaElement).srcObject = user.stream;\n\n    return user.id;\n  }\n\n}\n","<div class=\"mainContainer\">\n  <mat-form-field class=\"txtUserName\">\n    <mat-label>Name</mat-label>\n    <input matInput placeholder=\"your name\" [(ngModel)]=\"userName\" >\n  </mat-form-field>\n\n  <button mat-raised-button color=\"primary\" (click)=\"connect()\" *ngIf=\"!isConnected\" [disabled]=\"userName === ''\" >Connect</button>\n  <button mat-raised-button color=\"primary\" (click)=\"disconnect()\" *ngIf=\"isConnected\" >Disconnect</button>\n  <mat-card class=\"roomInvLink\"><p>You were connected to a new room since the requested room was full.</p></mat-card>\n  <mat-card class=\"roomInvLink\" *ngIf=\"roomId\"><p class='roomInvLinkLabel'>Room invitation link :</p>\n    <p>{{ currentURL + roomId }}</p>\n    <button mat-raised-button color=\"primary\" (click)=\"copyLink()\" *ngIf=\"roomId\" >Copy to clipboard</button></mat-card>\n\n  <div class=\"streamsContainer\">\n    <div *ngFor=\"let user of usersConnected\" class=\"userContainer\" >\n      <p class=\"userName\" >{{ user.userName }}</p>\n      <video class=\"videoScreen\" id=\"{{user.id}}\" [src]=\"setStreamSrc(user)\" controls autoplay>\n      </video>\n    </div>\n  </div>\n</div>\n","export class WebRTCClient {\r\n  id?: string;\r\n  userName: string;\r\n  stream: MediaStream;\r\n\r\n  constructor(id: string, userName: string, stream: MediaStream)\r\n  {\r\n    this.id = id;\r\n    this.userName = userName;\r\n    this.stream = stream;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class MediaStreamService {\r\n  private mediaStream: MediaStream = undefined;\r\n\r\n  public getMediaStream(): Promise<MediaStream> {\r\n    if (!this.mediaStream) {\r\n      return navigator.mediaDevices.getUserMedia({\r\n        audio: true, video: true\r\n      }).then ((stream: MediaStream) => {\r\n        return Promise.resolve(stream);\r\n      }).catch((e: MediaStreamError) => {\r\n        console.error('Could not get media stream: ', e);\r\n        return Promise.reject(e);\r\n      });\r\n    } else {\r\n      return Promise.resolve(this.mediaStream);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, ComponentFactoryResolver } from '@angular/core';\r\nimport * as socketIO from 'socket.io-client';\r\nimport { WebRTCClientService } from './webrtc-clients.service';\r\nimport { MediaStreamService } from './mediastream.service';\r\nimport { WebRTCClient } from '../models/webrtc-client.model';\r\nimport { RTC_INIT,\r\n         RTC_DISCONNECT,\r\n         RTC_USER_CONNECTED,\r\n         RTC_CONNECTED_TO_ROOM,\r\n         RTC_ROOM_IS_FULL,\r\n         RTC_MESSAGE,\r\n         RTC_MESSAGE_TYPE_ICE,\r\n         RTC_MESSAGE_TYPE_OFFER,\r\n         RTC_MESSAGE_TYPE_ANSWER,\r\n         RTC_USER_DISCONNECTED} from '../webrtc/webrtc-event-messages';\r\nimport { BrowserStack } from 'protractor/built/driverProviders';\r\n\r\n@Injectable()\r\nexport class WebRTCConnectionService {\r\n  private socket: SocketIOClient.Socket;\r\n  private userConnections: RTCPeerConnection[] = [];\r\n  private mediaStream: MediaStream = undefined;\r\n  private userId: string;\r\n\r\nconstructor(private webRTCClientsService: WebRTCClientService,\r\n            private mediaStreamService: MediaStreamService) {\r\n  this.socket = socketIO.connect('https://uvid-backend-rehuo10.herokuapp.com/');\r\n  this.socket.on('connect', () => {\r\n    this.userId = this.socket.id;\r\n    console.log('Socket', this.socket.id, 'connected.');\r\n  });\r\n\r\n  this.socket.on('disconnect', () => {\r\n    console.log('Socket', this.socket.id, 'disconnected.');\r\n  });\r\n\r\n  this.socket.on(RTC_USER_CONNECTED, (data) => {\r\n    this.makeOffer(data.userId, data.username);\r\n  });\r\n\r\n  this.socket.on(RTC_USER_DISCONNECTED, (data) => {\r\n    this.userDisconnected(data.userId);\r\n  });\r\n\r\n  this.socket.on(RTC_CONNECTED_TO_ROOM, (data) => {\r\n    this.webRTCClientsService.setRoomId(data.roomId, false);\r\n  });\r\n\r\n  this.socket.on(RTC_ROOM_IS_FULL, (data) => {\r\n    this.webRTCClientsService.setRoomId(data.roomId, true);\r\n  });\r\n\r\n  this.socket.on(RTC_MESSAGE, (data) => {\r\n    this.handleRTCMessage(data);\r\n  });\r\n}\r\n\r\npublic connect(userName: string, room?: string, ) {\r\n  this.mediaStreamService.getMediaStream().then((stream: MediaStream) => {\r\n    this.mediaStream = stream;\r\n    const currentUser = new WebRTCClient(this.socket.id, userName, this.mediaStream);\r\n    this.webRTCClientsService.addClient(currentUser);\r\n    if (!room) {\r\n      this.socket.emit(RTC_INIT, { userId: currentUser.id });\r\n    } else {\r\n      console.log(room);\r\n      this.socket.emit(RTC_INIT, { userId: currentUser.id, room: room, username: userName });\r\n    }\r\n  }).catch(e => {\r\n    console.error('Couln\\'t get mediaStream', e);\r\n  });\r\n}\r\n\r\npublic disconnect() {\r\n  this.socket.emit(RTC_DISCONNECT, { userId: this.userId });\r\n  this.mediaStream.getTracks().forEach((track) => {\r\n    track.stop();\r\n  });\r\n\r\n  this.webRTCClientsService.removeClient(this.socket.id);\r\n}\r\n\r\nprivate makeOffer(userId: string, userName: string) {\r\n  const userConnection = this.getUserConnection(userId, userName);\r\n  const options = {\r\n    mandatory: {\r\n      offerToReceiveVideo: true,\r\n      offerToReceiveAudio: true\r\n    }\r\n  };\r\n\r\n  userConnection.createOffer({ offerToReceiveAudio: true, offerToReceiveVideo: true }).then((session: RTCSessionDescriptionInit) => {\r\n    return userConnection.setLocalDescription(session).then(() => {\r\n      this.socket.emit(RTC_MESSAGE, {\r\n        from: this.userId,\r\n        dest: userId,\r\n        session: session,\r\n        type: RTC_MESSAGE_TYPE_OFFER,\r\n        username: this.webRTCClientsService.getUserName(this.userId)\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nprivate getUserConnection(userId, userName): RTCPeerConnection {\r\n  if (this.userConnections[userId]) {\r\n    return this.userConnections[userId];\r\n  }\r\n\r\n  const userConnection = new RTCPeerConnection();\r\n  this.userConnections[userId] = userConnection;\r\n  userConnection.onicecandidate = (event: RTCPeerConnectionIceEvent) => {\r\n    this.socket.emit(RTC_MESSAGE, {\r\n      from: this.userId,\r\n      dest: userId,\r\n      ice: event.candidate,\r\n      type: RTC_MESSAGE_TYPE_ICE\r\n    });\r\n  };\r\n\r\n  userConnection.onnegotiationneeded = () => {\r\n    console.log('Need nogociation:', userId);\r\n  };\r\n\r\n  userConnection.onsignalingstatechange = () => {\r\n    console.log('Client', userId, ' ICE signal changed to', userConnection.signalingState);\r\n  };\r\n\r\n  this.mediaStream.getTracks().forEach(track => {\r\n    userConnection.addTrack(track, this.mediaStream);\r\n  });\r\n  userConnection.ontrack = (event: RTCTrackEvent) => {\r\n    // Work around so this code only fires once even if the event is triggered twice (audio and video)\r\n    if (event.track.kind === 'video') {\r\n      console.log('Received new stream');\r\n      const user = new WebRTCClient(userId, userName, event.streams[0]);\r\n      this.webRTCClientsService.addClient(user);\r\n    }\r\n  };\r\n\r\n  return userConnection;\r\n}\r\n\r\nprivate handleRTCMessage(message) {\r\n  const userConnection = this.getUserConnection(message.from, message.username);\r\n\r\n  switch (message.type) {\r\n    case RTC_MESSAGE_TYPE_ICE:\r\n      if (message.ice) {\r\n        console.log('Adding ice candidate');\r\n        userConnection.addIceCandidate(message.ice);\r\n      }\r\n      break;\r\n    case RTC_MESSAGE_TYPE_OFFER:\r\n      userConnection.setRemoteDescription(new RTCSessionDescription(message.session)).then(() => {\r\n        console.log('Setting remote session');\r\n        return userConnection.createAnswer().then((session: RTCSessionDescription) => {\r\n          return userConnection.setLocalDescription(session).then(() => {\r\n            this.socket.emit(RTC_MESSAGE, {\r\n              from: this.userId,\r\n              dest: message.from,\r\n              session: session,\r\n              type: RTC_MESSAGE_TYPE_ANSWER,\r\n              username: this.webRTCClientsService.getUserName(this.userId)\r\n            });\r\n          });\r\n        });\r\n      }).catch(e => {\r\n        console.error('Error on SDP-Offer:', e);\r\n      });\r\n      break;\r\n    case RTC_MESSAGE_TYPE_ANSWER:\r\n      userConnection.setRemoteDescription(new RTCSessionDescription(message.session)).then(() => {\r\n        console.log('Setting remote session');\r\n      }).catch(e => console.error('Error on answer:', e));\r\n      break;\r\n  }\r\n}\r\n\r\nprivate userDisconnected(userId) {\r\n  this.webRTCClientsService.removeClient(userId);\r\n}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { List } from 'immutable';\r\nimport { Observable } from 'rxjs';\r\nimport { Subject } from 'rxjs';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { WebRTCClient } from '../models/webrtc-client.model';\r\n\r\n@Injectable()\r\nexport class WebRTCClientService {\r\n  private clients: BehaviorSubject<List<WebRTCClient>> = new BehaviorSubject(List([]));\r\n  private roomId: BehaviorSubject<string> = new BehaviorSubject(undefined);\r\n  private roomWasFull: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n  constructor() {}\r\n\r\n  public get getClients(): Observable<List<WebRTCClient>> {\r\n    return this.clients.asObservable();\r\n  }\r\n\r\n  public addClient(newClient: WebRTCClient): void {\r\n    this.clients.next(this.clients.getValue().push(newClient));\r\n  }\r\n\r\n  public removeClient(clientId: string): void {\r\n    const clientList = this.clients.getValue();\r\n    const removeIndex = clientList.findIndex(c => c.id === clientId);\r\n    this.clients.next(clientList.remove(removeIndex));\r\n  }\r\n\r\n  public get getRoomId(): Observable<string> {\r\n    return this.roomId.asObservable();\r\n  }\r\n\r\n  public get getRoomWasFull(): Observable<boolean> {\r\n    return this.roomWasFull.asObservable();\r\n  }\r\n\r\n  public setRoomId(roomId: string, roomWasFull: boolean) {\r\n    this.roomId.next(roomId);\r\n    this.roomWasFull.next(roomWasFull);\r\n  }\r\n\r\n  public getUserName(clientId: string): string {\r\n    const clientList = this.clients.getValue();\r\n    return clientList.find(c => c.id === clientId).userName;\r\n  }\r\n}\r\n","export const RTC_USER_CONNECTED = 'user_connected';\r\nexport const RTC_USER_DISCONNECTED = 'user_disconnected';\r\nexport const RTC_DISCONNECT = 'disconnects';\r\nexport const RTC_INIT = 'init';\r\nexport const RTC_CONNECTED_TO_ROOM = 'connected_to_room';\r\nexport const RTC_ROOM_IS_FULL = 'room_is_full';\r\nexport const RTC_MESSAGE = 'message';\r\nexport const RTC_MESSAGE_TYPE_ICE = 'ice';\r\nexport const RTC_MESSAGE_TYPE_OFFER = 'offer';\r\nexport const RTC_MESSAGE_TYPE_ANSWER = 'answer';\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}